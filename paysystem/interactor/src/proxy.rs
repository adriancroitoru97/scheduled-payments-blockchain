// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct PaySystemProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for PaySystemProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = PaySystemProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        PaySystemProxyMethods { wrapped_tx: tx }
    }
}

pub struct PaySystemProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> PaySystemProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init(
        self,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> PaySystemProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn add_schedule<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<u64>,
        Arg3: ProxyArg<u64>,
        Arg4: ProxyArg<Option<u64>>,
    >(
        self,
        recipient: Arg0,
        amount: Arg1,
        frequency: Arg2,
        start_time: Arg3,
        end_time: Arg4,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("addSchedule")
            .argument(&recipient)
            .argument(&amount)
            .argument(&frequency)
            .argument(&start_time)
            .argument(&end_time)
            .original_result()
    }

    pub fn cancel_schedule<
        Arg0: ProxyArg<usize>,
    >(
        self,
        schedule_index: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("cancelSchedule")
            .argument(&schedule_index)
            .original_result()
    }

    pub fn execute_payments(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("executePayments")
            .original_result()
    }

    pub fn deposit_funds(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("depositFunds")
            .original_result()
    }

    pub fn get_schedule<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<usize>,
    >(
        self,
        user: Arg0,
        index: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, Option<PaymentSchedule<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getSchedule")
            .argument(&user)
            .argument(&index)
            .original_result()
    }

    pub fn get_schedules<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        user: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedVec<Env::Api, PaymentSchedule<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getSchedules")
            .argument(&user)
            .original_result()
    }

    pub fn get_transaction_history<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        user: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, Option<TransactionRecord<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getTransactionHistory")
            .argument(&user)
            .original_result()
    }

    pub fn get_balance<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        user: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getBalance")
            .argument(&user)
            .original_result()
    }
}

#[type_abi]
#[derive(TopEncode, TopDecode, NestedEncode, NestedDecode, Debug, ManagedVecItem)]
pub struct PaymentSchedule<Api>
where
    Api: ManagedTypeApi,
{
    pub recipient: ManagedAddress<Api>,
    pub amount: BigUint<Api>,
    pub frequency: u64,
    pub next_execution_time: u64,
    pub end_time: u64,
}

#[type_abi]
#[derive(TopEncode, TopDecode, NestedEncode, NestedDecode, Debug)]
pub struct TransactionRecord<Api>
where
    Api: ManagedTypeApi,
{
    pub recipient: ManagedAddress<Api>,
    pub amount: BigUint<Api>,
    pub timestamp: u64,
}
